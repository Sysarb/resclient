/** Declaration file generated by dts-gen */

export class ResClient {
    constructor(hostUrlOrFactory: any, opt: any);

    authenticate(rid: any, method: any, params: any): any;

    call(rid: any, method: any, params: any): any;

    connect(): any;

    create(rid: any, params: any): any;

    disconnect(): void;

    get(rid: any): any;

    getHostUrl(): any;

    off(events: any, handler: any): void;

    on(events: any, handler: any): void;

    registerCollectionType(pattern: any, factory: any): any;

    registerModelType(pattern: any, factory: any): any;

    resourceOff(rid: any, events: any, handler: any): void;

    resourceOn(rid: any, events: any, handler: any): void;

    setModel(modelId: any, props: any): any;

    setOnConnect(onConnect: any): any;

    unregisterCollectionType(pattern: any): any;

    unregisterModelType(pattern: any): any;

}

export class ResCollection {
    constructor(api: any, rid: any, opt: any);

    atIndex(idx: any): any;

    auth(method: any, params: any): any;

    call(method: any, params: any): any;

    get(id: any): any;

    getClient(): any;

    getResourceId(): any;

    indexOf(item: any): any;

    off(events: any, handler: any): any;

    on(events: any, handler: any): any;

    toArray(): any;

    toJSON(): any;

}

export class ResError {
    constructor(rid: any, method: any, params: any);

    getResourceId(): any;

}

export class ResModel {
    constructor(api: any, rid: any, opt: any);

    auth(method: any, params: any): any;

    call(method: any, params: any): any;

    getClient(): any;

    getResourceId(): any;

    off(events: any, handler: any): any;

    on(events: any, handler: any): any;

    set(props: any): any;

    toJSON(): any;

}

export function isResError(o: any): any;

